import idc
import pefile
from fixedint import UInt32
from struct import unpack

# stage 3 hashing algorithm
def hash_string(s):
    n = UInt32(0x2326)

    for ch in s:
        n += (n << 7) | (n >> 1)
        n += ch

    return n

dll_list = ["ntdll.dll", "kernel32.dll", "shlwapi.dll"]
dll_directory = "C:\\Windows\\SysWOW64\\"

hashes_table = {}

def make_table():
    for dll in dll_list:
        fname = dll_directory + dll
        pe = pefile.PE(fname, fast_load=True)
        pe.parse_data_directories()

        enum_name = dll[:-4] + "_hashes"

        for entry in pe.DIRECTORY_ENTRY_EXPORT.symbols:
            if entry.name == None: continue
            key = hash_string(entry.name)
            hashes_table[key] = (entry.name, dll[:-4])

def lookup_hash():
    selected_item = idaapi.get_highlight(idaapi.get_current_viewer())[0]

    if selected_item[-1] == 'h':
        hash_value = int(selected_item[:-1], 16)

    else:
        print("[error] the selected item is not a hash")
        return

    if hash_value in hashes_table.keys():
        entry = hashes_table[hash_value]
        enum_name = entry[1] + "_hashes"
        enum_id = idc.get_enum(enum_name)

        if enum_id == idc.BADADDR:
            enum_id = idc.add_enum(-1, enum_name, ida_bytes.hex_flag())

        idc.add_enum_member(enum_id, entry[0].decode(), hash_value, -1)

        ea = idc.here()
        start = idaapi.get_item_head(ea)

        if idc.is_code(idc.get_full_flags(ea)):
            if idc.get_operand_value(ea,0) == hash_value:
                idc.op_enum(start, 0, enum_id, 0)

            elif idc.get_operand_value(ea,1) == hash_value:
                idc.op_enum(start, 1, enum_id, 0)

            else:
                print("[error] couldn't set the highlighted value as an enum")

        else:
            ida_bytes.op_enum(start, 0, enum_id, 0)

    else:
        print("[error] no hash found for {}".format(hex(hash_value)))

idaapi.add_hotkey("Alt+Z", lookup_hash)
print("Run make_table() to create the hash lookup table")
print("Alt+Z to lookup the hash of the selected identifier")
