//
// +-------------------------------------------------------------------------+
// |      This file was generated by The Interactive Disassembler (IDA)      |
// |           Copyright (c) 2022 Hex-Rays, <support@hex-rays.com>           |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
        // set 'loading idc file' mode
        set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
        GenInfo();            // various settings
        Segments();           // segmentation
        Enums();              // enumerations
        Structures();         // structure types
        ApplyStrucTInfos();   // structure type infos
        Patches();            // manual patches
        SegRegs();            // segment register values
        Bytes();              // individual bytes (code,data)
        Functions();          // function definitions
        // clear 'loading idc file' mode
        set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("metapc", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 1);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLG, SCF_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 2);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 16);
	set_inf_attr(INF_CMT_INDENT, 40);
	set_inf_attr(INF_MAXREF, 0x10);
	add_default_til("mssdk_win7");
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	set_selector(0X1,0);
	set_selector(0X2,0);
	set_selector(0X3,0);

	add_segm_ex(0X401000,0X402000,0X1,1,3,2,ADDSEG_NOSREG);
	SegRename(0X401000,"CODE");
	SegClass (0X401000,"CODE");
	SegDefReg(0x401000,"es",0x0);
	SegDefReg(0x401000,"ss",0x0);
	SegDefReg(0x401000,"ds",0x1);
	set_segm_type(0X401000,2);
	add_segm_ex(0X402000,0X403000,0X2,1,3,2,ADDSEG_NOSREG);
	SegRename(0X402000,"DATA");
	SegClass (0X402000,"DATA");
	SegDefReg(0x402000,"es",0x0);
	SegDefReg(0x402000,"ss",0x0);
	SegDefReg(0x402000,"ds",0x1);
	set_segm_type(0X402000,3);
	add_segm_ex(0X403000,0X404000,0X3,1,3,2,ADDSEG_NOSREG);
	SegRename(0X403000,".idata");
	SegClass (0X403000,"DATA");
	SegDefReg(0x403000,"es",0x0);
	SegDefReg(0x403000,"ss",0x0);
	SegDefReg(0x403000,"ds",0x1);
	set_segm_type(0X403000,1);
	set_inf_attr(INF_LOW_OFF, 0x401000);
	set_inf_attr(INF_HIGH_OFF, 0x404000);
}

static Enums_0(id) {

	id = add_enum(-1,"MACRO_HKEY",0x1100000);
	add_enum_member(id,"HKEY_CLASSES_ROOT",	0X80000000,	-1);
	add_enum_member(id,"HKEY_CURRENT_USER",	0X80000001,	-1);
	add_enum_member(id,"HKEY_LOCAL_MACHINE",	0X80000002,	-1);
	add_enum_member(id,"HKEY_USERS",	0X80000003,	-1);
	add_enum_member(id,"HKEY_PERFORMANCE_DATA",	0X80000004,	-1);
	add_enum_member(id,"HKEY_CURRENT_CONFIG",	0X80000005,	-1);
	add_enum_member(id,"HKEY_DYN_DATA",	0X80000006,	-1);
	add_enum_member(id,"HKEY_CURRENT_USER_LOCAL_SETTINGS",	0X80000007,	-1);
	add_enum_member(id,"HKEY_PERFORMANCE_TEXT",	0X80000050,	-1);
	add_enum_member(id,"HKEY_PERFORMANCE_NLSTEXT",	0X80000060,	-1);
	id = add_enum(-1,"MACRO_GENERIC",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"GENERIC_ALL",	0X10000000,	0x10000000);
	add_enum_member(id,"GENERIC_EXECUTE",	0X20000000,	0x20000000);
	add_enum_member(id,"GENERIC_WRITE",	0X40000000,	0x40000000);
	add_enum_member(id,"GENERIC_READ",	0X80000000,	0x80000000);
	id = add_enum(-1,"MACRO_FILE",0x1100000);
	add_enum_member(id,"FILE_READ_DATA",	0X1,	-1);
	add_enum_member(id,"FILE_LIST_DIRECTORY",	0X1,	-1);
	add_enum_member(id,"FILE_SHARE_READ",	0X1,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_READONLY",	0X1,	-1);
	add_enum_member(id,"FILE_WRITE_DATA",	0X2,	-1);
	add_enum_member(id,"FILE_ADD_FILE",	0X2,	-1);
	add_enum_member(id,"FILE_SHARE_WRITE",	0X2,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_HIDDEN",	0X2,	-1);
	add_enum_member(id,"FILE_APPEND_DATA",	0X4,	-1);
	add_enum_member(id,"FILE_ADD_SUBDIRECTORY",	0X4,	-1);
	add_enum_member(id,"FILE_CREATE_PIPE_INSTANCE",	0X4,	-1);
	add_enum_member(id,"FILE_SHARE_DELETE",	0X4,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_SYSTEM",	0X4,	-1);
	add_enum_member(id,"FILE_READ_EA",	0X8,	-1);
	add_enum_member(id,"FILE_WRITE_EA",	0X10,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_DIRECTORY",	0X10,	-1);
	add_enum_member(id,"FILE_EXECUTE",	0X20,	-1);
	add_enum_member(id,"FILE_TRAVERSE",	0X20,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_ARCHIVE",	0X20,	-1);
	add_enum_member(id,"FILE_DELETE_CHILD",	0X40,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_DEVICE",	0X40,	-1);
	add_enum_member(id,"FILE_READ_ATTRIBUTES",	0X80,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_NORMAL",	0X80,	-1);
	add_enum_member(id,"FILE_WRITE_ATTRIBUTES",	0X100,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_TEMPORARY",	0X100,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_SPARSE_FILE",	0X200,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_REPARSE_POINT",	0X400,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_COMPRESSED",	0X800,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_OFFLINE",	0X1000,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_NOT_CONTENT_INDEXED",	0X2000,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_ENCRYPTED",	0X4000,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_INTEGRITY_STREAM",	0X8000,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_VIRTUAL",	0X10000,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_NO_SCRUB_DATA",	0X20000,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_EA",	0X40000,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_RECALL_ON_OPEN",	0X40000,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_PINNED",	0X80000,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_UNPINNED",	0X100000,	-1);
	add_enum_member(id,"FILE_GENERIC_READ",	0X120089,	-1);
	add_enum_member(id,"FILE_GENERIC_EXECUTE",	0X1200A0,	-1);
	add_enum_member(id,"FILE_GENERIC_WRITE",	0X120116,	-1);
	add_enum_member(id,"FILE_ALL_ACCESS",	0X1F01FF,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS",	0X400000,	-1);
	id = add_enum(-1,"MACRO_OPEN",0x2220000);
	set_enum_bf(id,1);
	add_enum_member(id,"OPEN_EXISTING",	0X3,	0x3);
	add_enum_member(id,"OPEN_ALWAYS",	0X4,	0x4);
	id = add_enum(-1,"MACRO_PAGE",0x1120000);
	set_enum_bf(id,1);
	add_enum_member(id,"PAGE_NOACCESS",	0X1,	0x1);
	add_enum_member(id,"PAGE_READONLY",	0X2,	0x2);
	add_enum_member(id,"PAGE_READWRITE",	0X4,	0x4);
	add_enum_member(id,"PAGE_WRITECOPY",	0X8,	0x8);
	add_enum_member(id,"PAGE_EXECUTE",	0X10,	0x10);
	add_enum_member(id,"PAGE_EXECUTE_READ",	0X20,	0x20);
	add_enum_member(id,"PAGE_EXECUTE_READWRITE",	0X40,	0x40);
	add_enum_member(id,"PAGE_EXECUTE_WRITECOPY",	0X80,	0x80);
	add_enum_member(id,"PAGE_GUARD",	0X100,	0x100);
	add_enum_member(id,"PAGE_NOCACHE",	0X200,	0x200);
	add_enum_member(id,"PAGE_WRITECOMBINE",	0X400,	0x400);
	add_enum_member(id,"PAGE_ENCLAVE_DECOMMIT",	0X10000000,	0x10000000);
	add_enum_member(id,"PAGE_ENCLAVE_UNVALIDATED",	0X20000000,	0x20000000);
	add_enum_member(id,"PAGE_TARGETS_NO_UPDATE",	0X40000000,	0x40000000);
	add_enum_member(id,"PAGE_TARGETS_INVALID",	0X40000000,	0x40000000);
	add_enum_member(id,"PAGE_ENCLAVE_THREAD_CONTROL",	0X80000000,	0x80000000);
	add_enum_member(id,"PAGE_REVERT_TO_FILE_MAP",	0X80000000,	0x80000000);
	id = add_enum(-1,"MACRO_FILE_MAP",0x2220000);
	add_enum_member(id,"FILE_MAP_COPY",	0X1,	-1);
	add_enum_member(id,"FILE_CACHE_MAX_HARD_ENABLE",	0X1,	-1);
	add_enum_member(id,"FILE_MAP_WRITE",	0X2,	-1);
	add_enum_member(id,"FILE_CACHE_MAX_HARD_DISABLE",	0X2,	-1);
	add_enum_member(id,"FILE_MAP_READ",	0X4,	-1);
	add_enum_member(id,"FILE_CACHE_MIN_HARD_ENABLE",	0X4,	-1);
	add_enum_member(id,"FILE_CACHE_MIN_HARD_DISABLE",	0X8,	-1);
	add_enum_member(id,"FILE_MAP_EXECUTE",	0X20,	-1);
	add_enum_member(id,"FILE_MAP_ALL_ACCESS",	0XF001F,	-1);
	add_enum_member(id,"FILE_MAP_LARGE_PAGES",	0X20000000,	-1);
	add_enum_member(id,"FILE_MAP_TARGETS_INVALID",	0X40000000,	-1);
	add_enum_member(id,"FILE_MAP_RESERVE",	0X80000000,	-1);
	id = add_enum(-1,"MACRO_MAPI_ORIG",0x2220000);
	add_enum_member(id,"MAPI_ORIG",	0,	-1);
	add_enum_member(id,"MAPI_TO",	0X1,	-1);
	add_enum_member(id,"MAPI_STORE",	0X1,	-1);
	add_enum_member(id,"MAPI_CC",	0X2,	-1);
	add_enum_member(id,"MAPI_ADDRBOOK",	0X2,	-1);
	add_enum_member(id,"MAPI_BCC",	0X3,	-1);
	add_enum_member(id,"MAPI_FOLDER",	0X3,	-1);
	add_enum_member(id,"MAPI_ABCONT",	0X4,	-1);
	add_enum_member(id,"MAPI_MESSAGE",	0X5,	-1);
	add_enum_member(id,"MAPI_MAILUSER",	0X6,	-1);
	add_enum_member(id,"MAPI_ATTACH",	0X7,	-1);
	add_enum_member(id,"MAPI_NOTRESERVED",	0X8,	-1);
	add_enum_member(id,"MAPI_DISTLIST",	0X8,	-1);
	add_enum_member(id,"MAPI_PROFSECT",	0X9,	-1);
	add_enum_member(id,"MAPI_STATUS",	0XA,	-1);
	add_enum_member(id,"MAPI_SESSION",	0XB,	-1);
	add_enum_member(id,"MAPI_FORMINFO",	0XC,	-1);
	add_enum_member(id,"MAPI_NOW",	0X10,	-1);
	add_enum_member(id,"MAPI_THISSESSION",	0X20,	-1);
	add_enum_member(id,"MAPI_NOTRECIP",	0X40,	-1);
	add_enum_member(id,"MAPI_SHORTTERM",	0X80,	-1);
	add_enum_member(id,"MAPI_COMPOUND",	0X80,	-1);
	add_enum_member(id,"MAPI_P1",	0X10000000,	-1);
	add_enum_member(id,"MAPI_SUBMITTED",	0X80000000,	-1);
	id = add_enum(-1,"MACRO_REG",0x1100000);
	add_enum_member(id,"REG_OPTION_RESERVED",	0,	-1);
	add_enum_member(id,"REG_OPTION_NON_VOLATILE",	0,	-1);
	add_enum_member(id,"REG_NONE",	0,	-1);
	add_enum_member(id,"REG_OPTION_VOLATILE",	0X1,	-1);
	add_enum_member(id,"REG_CREATED_NEW_KEY",	0X1,	-1);
	add_enum_member(id,"REG_STANDARD_FORMAT",	0X1,	-1);
	add_enum_member(id,"REG_WHOLE_HIVE_VOLATILE",	0X1,	-1);
	add_enum_member(id,"REG_FORCE_UNLOAD",	0X1,	-1);
	add_enum_member(id,"REG_UNLOAD_LEGAL_FLAGS",	0X1,	-1);
	add_enum_member(id,"REG_NOTIFY_CHANGE_NAME",	0X1,	-1);
	add_enum_member(id,"REG_SZ",	0X1,	-1);
	add_enum_member(id,"REG_OPTION_CREATE_LINK",	0X2,	-1);
	add_enum_member(id,"REG_OPENED_EXISTING_KEY",	0X2,	-1);
	add_enum_member(id,"REG_LATEST_FORMAT",	0X2,	-1);
	add_enum_member(id,"REG_REFRESH_HIVE",	0X2,	-1);
	add_enum_member(id,"REG_NOTIFY_CHANGE_ATTRIBUTES",	0X2,	-1);
	add_enum_member(id,"REG_EXPAND_SZ",	0X2,	-1);
	add_enum_member(id,"REG_BINARY",	0X3,	-1);
	add_enum_member(id,"REG_OPTION_BACKUP_RESTORE",	0X4,	-1);
	add_enum_member(id,"REG_NO_COMPRESSION",	0X4,	-1);
	add_enum_member(id,"REG_NO_LAZY_FLUSH",	0X4,	-1);
	add_enum_member(id,"REG_NOTIFY_CHANGE_LAST_SET",	0X4,	-1);
	add_enum_member(id,"REG_DWORD",	0X4,	-1);
	add_enum_member(id,"REG_DWORD_LITTLE_ENDIAN",	0X4,	-1);
	add_enum_member(id,"REG_DWORD_BIG_ENDIAN",	0X5,	-1);
	add_enum_member(id,"REG_LINK",	0X6,	-1);
	add_enum_member(id,"REG_MULTI_SZ",	0X7,	-1);
	add_enum_member(id,"REG_OPTION_OPEN_LINK",	0X8,	-1);
	add_enum_member(id,"REG_FORCE_RESTORE",	0X8,	-1);
	add_enum_member(id,"REG_NOTIFY_CHANGE_SECURITY",	0X8,	-1);
	add_enum_member(id,"REG_RESOURCE_LIST",	0X8,	-1);
	add_enum_member(id,"REG_FULL_RESOURCE_DESCRIPTOR",	0X9,	-1);
	add_enum_member(id,"REG_RESOURCE_REQUIREMENTS_LIST",	0XA,	-1);
	add_enum_member(id,"REG_QWORD",	0XB,	-1);
	add_enum_member(id,"REG_QWORD_LITTLE_ENDIAN",	0XB,	-1);
	add_enum_member(id,"REG_OPTION_DONT_VIRTUALIZE",	0X10,	-1);
	add_enum_member(id,"REG_APP_HIVE",	0X10,	-1);
	add_enum_member(id,"REG_OPEN_LEGAL_OPTION",	0X1C,	-1);
	add_enum_member(id,"REG_LEGAL_OPTION",	0X1F,	-1);
	add_enum_member(id,"REG_PROCESS_PRIVATE",	0X20,	-1);
	add_enum_member(id,"REG_START_JOURNAL",	0X40,	-1);
	add_enum_member(id,"REG_HIVE_EXACT_FILE_GROWTH",	0X80,	-1);
	add_enum_member(id,"REG_HIVE_NO_RM",	0X100,	-1);
	add_enum_member(id,"REG_HIVE_SINGLE_LOG",	0X200,	-1);
	add_enum_member(id,"REG_BOOT_HIVE",	0X400,	-1);
	add_enum_member(id,"REG_LOAD_HIVE_OPEN_HANDLE",	0X800,	-1);
	add_enum_member(id,"REG_FLUSH_HIVE_FILE_GROWTH",	0X1000,	-1);
	add_enum_member(id,"REG_OPEN_READ_ONLY",	0X2000,	-1);
	add_enum_member(id,"REG_APP_HIVE_OPEN_READ_ONLY",	0X2000,	-1);
	add_enum_member(id,"REG_IMMUTABLE",	0X4000,	-1);
	add_enum_member(id,"REG_NOTIFY_THREAD_AGNOSTIC",	0X10000000,	-1);
	add_enum_member(id,"REG_LEGAL_CHANGE_FILTER",	0X1000000F,	-1);
	return id;
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
	id = Enums_0(id);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("MapiFileDesc");
	SetType(get_member_id(id, 0x0), "ULONG");
	SetType(get_member_id(id, 0x4), "ULONG");
	SetType(get_member_id(id, 0x8), "ULONG");
	SetType(get_member_id(id, 0xC), "LPSTR");
	SetType(get_member_id(id, 0x10), "LPSTR");
	SetType(get_member_id(id, 0x14), "LPVOID");
	id = get_struc_id("MapiRecipDesc");
	SetType(get_member_id(id, 0x0), "ULONG");
	SetType(get_member_id(id, 0x4), "ULONG");
	SetType(get_member_id(id, 0x8), "LPSTR");
	SetType(get_member_id(id, 0xC), "LPSTR");
	SetType(get_member_id(id, 0x10), "ULONG");
	SetType(get_member_id(id, 0x14), "LPVOID");
	id = get_struc_id("MapiMessage");
	SetType(get_member_id(id, 0x0), "ULONG");
	SetType(get_member_id(id, 0x4), "LPSTR");
	SetType(get_member_id(id, 0x8), "LPSTR");
	SetType(get_member_id(id, 0xC), "LPSTR");
	SetType(get_member_id(id, 0x10), "LPSTR");
	SetType(get_member_id(id, 0x14), "LPSTR");
	SetType(get_member_id(id, 0x18), "FLAGS");
	SetType(get_member_id(id, 0x1C), "lpMapiRecipDesc");
	SetType(get_member_id(id, 0x20), "ULONG");
	SetType(get_member_id(id, 0x24), "lpMapiRecipDesc");
	SetType(get_member_id(id, 0x28), "ULONG");
	SetType(get_member_id(id, 0x2C), "lpMapiFileDesc");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"MapiFileDesc",0);
	id = add_struc(-1,"MapiRecipDesc",0);
	id = add_struc(-1,"MapiMessage",0);
	
	id = get_struc_id("MapiFileDesc");
	mid = add_struc_member(id,"ulReserved",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"flFlags",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nPosition",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lpszPathName",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lpszFileName",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lpFileType",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("MapiRecipDesc");
	mid = add_struc_member(id,"ulReserved",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ulRecipClass",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lpszName",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lpszAddress",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ulEIDSize",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lpEntryID",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("MapiMessage");
	mid = add_struc_member(id,"ulReserved",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lpszSubject",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lpszNoteText",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lpszMessageType",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lpszDateReceived",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lpszConversationID",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"flFlags",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lpOriginator",	0X1C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"nRecipCount",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lpRecips",	0X24,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"nFileCount",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lpFiles",	0X2C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
	patch_byte	(0X4030AC,	0X24);
	patch_byte	(0X4030AD,	0X31);
	patch_byte	(0X4030AE,	0);
	patch_byte	(0X4030AF,	0);
	patch_byte	(0X4030B0,	0X2E);
	patch_byte	(0X4030B1,	0X31);
	patch_byte	(0X4030B2,	0);
	patch_byte	(0X4030B3,	0);
	patch_byte	(0X4030B4,	0X3C);
	patch_byte	(0X4030B5,	0X31);
	patch_byte	(0X4030B6,	0);
	patch_byte	(0X4030B7,	0);
	patch_byte	(0X4030B8,	0X4A);
	patch_byte	(0X4030B9,	0X31);
	patch_byte	(0X4030BA,	0);
	patch_byte	(0X4030BB,	0);
	patch_byte	(0X4030BC,	0X5E);
	patch_byte	(0X4030BD,	0X31);
	patch_byte	(0X4030BE,	0);
	patch_byte	(0X4030BF,	0);
	patch_byte	(0X4030C0,	0X6C);
	patch_byte	(0X4030C1,	0X31);
	patch_byte	(0X4030C2,	0);
	patch_byte	(0X4030C3,	0);
	patch_byte	(0X4030C4,	0X7A);
	patch_byte	(0X4030C5,	0X31);
	patch_byte	(0X4030C6,	0);
	patch_byte	(0X4030C7,	0);
	patch_byte	(0X4030C8,	0X88);
	patch_byte	(0X4030C9,	0X31);
	patch_byte	(0X4030CA,	0);
	patch_byte	(0X4030CB,	0);
	patch_byte	(0X4030CC,	0X9C);
	patch_byte	(0X4030CD,	0X31);
	patch_byte	(0X4030CE,	0);
	patch_byte	(0X4030CF,	0);
	patch_byte	(0X4030D0,	0XB2);
	patch_byte	(0X4030D1,	0X31);
	patch_byte	(0X4030D2,	0);
	patch_byte	(0X4030D3,	0);
	patch_byte	(0X4030D4,	0XC2);
	patch_byte	(0X4030D5,	0X31);
	patch_byte	(0X4030D6,	0);
	patch_byte	(0X4030D7,	0);
	patch_byte	(0X4030DC,	0XE2);
	patch_byte	(0X4030DD,	0X31);
	patch_byte	(0X4030DE,	0);
	patch_byte	(0X4030DF,	0);
	patch_byte	(0X4030E4,	0XF0);
	patch_byte	(0X4030E5,	0X31);
	patch_byte	(0X4030E6,	0);
	patch_byte	(0X4030E7,	0);
	patch_byte	(0X4030EC,	0XD4);
	patch_byte	(0X4030ED,	0X31);
	patch_byte	(0X4030EE,	0);
	patch_byte	(0X4030EF,	0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	update_extra_cmt		(0X401000,	E_PREV + 0,	"; File Name   : C:\\Users\\User\\Desktop\\Twin.exe");
	update_extra_cmt		(0X401000,	E_PREV + 1,	"; Format      : Portable executable for 80386 (PE)");
	update_extra_cmt		(0X401000,	E_PREV + 2,	"; Imagebase   : 400000");
	update_extra_cmt		(0X401000,	E_PREV + 3,	"; Section 1. (virtual address 00001000)");
	update_extra_cmt		(0X401000,	E_PREV + 4,	"; Virtual size                  : 00001000 (   4096.)");
	update_extra_cmt		(0X401000,	E_PREV + 5,	"; Section size in file          : 00000400 (   1024.)");
	update_extra_cmt		(0X401000,	E_PREV + 6,	"; Offset to raw data for section: 00000600");
	update_extra_cmt		(0X401000,	E_PREV + 7,	"; Flags 60000020: Text Executable Readable");
	update_extra_cmt		(0X401000,	E_PREV + 8,	"; Alignment     : default");
	create_dword	(x=0X401000);
	make_array	(x,	0X68);
	op_chr		(x,	0);
	create_byte	(0X4011A0);
	make_array	(0X4011A0,	0X2);
	create_insn	(x=0X4011A2);
	op_dec		(x,	0);
	set_name	(0X4011A2,	"start");
	create_insn	(x=0X4011A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4011B1);
	op_dec		(x,	0);
	create_insn	(x=0X4011B4);
	op_enum		(x,	0,	GetEnum("MACRO_REG"),7);
	set_cmt	(0X4011B6,	"push 'AntiVirus Freeware'",	0);
	create_strlit	(0X4011BB,	0X13);
	set_name	(0X4011BB,	"aAntivirusFreew");
	set_cmt	(0X4011CE,	"push 'Software\\Microsoft\\Windows\\CurrentVersion\\Run'",	0);
	create_insn	(0X4011CE);
	create_strlit	(0X4011D3,	0X2E);
	set_name	(0X4011D3,	"aSoftwareMicros");
	create_insn	(x=0X401201);
	op_enum		(x,	0,	GetEnum("MACRO_HKEY"),0);
	set_cmt	(0X40120B,	"push 'C:\\twin.vbs'",	0);
	create_strlit	(0X401210,	0XC);
	set_name	(0X401210,	"aCTwinVbs");
	create_insn	(0X40121C);
	create_insn	(x=0X401221);
	op_dec		(x,	0);
	create_insn	(x=0X401223);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40122D,	"push '\\NetInfo.doc'",	0);
	create_strlit	(0X401232,	0XD);
	set_name	(0X401232,	"aNetinfoDoc");
	create_insn	(x=0X40123F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X40124B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401256,	"check if result is INTERNET_CONNECTION_MODEM",	0);
	create_insn	(x=0X40125C);
	op_enum		(x,	0,	GetEnum("MACRO_OPEN"),0);
	create_insn	(x=0X401260);
	op_enum		(x,	0,	GetEnum("MACRO_FILE"),2);
	create_insn	(x=0X401262);
	op_enum		(x,	0,	GetEnum("MACRO_GENERIC"),0);
	set_cmt	(0X401267,	"push 'C:\\backup.win'",	0);
	create_strlit	(0X40126C,	0XE);
	set_name	(0X40126C,	"aCBackupWin");
	create_insn	(0X40127A);
	create_insn	(x=0X40128E);
	op_enum		(x,	0,	GetEnum("MACRO_PAGE"),0);
	create_insn	(x=0X4012A3);
	op_enum		(x,	0,	GetEnum("MACRO_FILE_MAP"),0);
	create_insn	(x=0X4012BF);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4012C6);
	op_chr		(x,	1);
	set_cmt	(0X4012CA,	"'\\r'",	0);
	set_cmt	(0X4012CE,	"'\\n'",	0);
	create_insn	(x=0X4012D2);
	op_chr		(x,	1);
	create_insn	(x=0X4012D6);
	op_chr		(x,	1);
	create_insn	(0X4012DE);
	create_insn	(0X4012E1);
	create_insn	(0X4012F0);
	create_insn	(0X4012F6);
	create_insn	(0X40130F);
	set_name	(0X40130F,	"send_mail");
	create_insn	(x=0X401313);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X401325);
	set_name	(0X401325,	"lstrcat");
	create_insn	(0X40132B);
	set_name	(0X40132B,	"ExitProcess");
	create_insn	(0X401331);
	set_name	(0X401331,	"CreateFileA");
	create_insn	(0X401337);
	set_name	(0X401337,	"CreateFileMappingA");
	create_insn	(0X40133D);
	set_name	(0X40133D,	"DeleteFileA");
	create_insn	(0X401343);
	set_name	(0X401343,	"CloseHandle");
	create_insn	(0X401349);
	set_name	(0X401349,	"GetFileSize");
	create_insn	(0X40134F);
	set_name	(0X40134F,	"GetModuleFileNameA");
	create_insn	(0X401355);
	set_name	(0X401355,	"GetWindowsDirectoryA");
	create_insn	(0X40135B);
	set_name	(0X40135B,	"MapViewOfFile");
	create_insn	(0X401361);
	set_name	(0X401361,	"UnmapViewOfFile");
	create_insn	(0X401367);
	set_name	(0X401367,	"SHSetValueA");
	create_insn	(0X40136D);
	set_name	(0X40136D,	"InternetGetConnectedState");
	create_insn	(0X401373);
	set_name	(0X401373,	"MAPISendMail");
	create_byte	(0X401379);
	make_array	(0X401379,	0X87);
	create_dword	(0X401400);
	make_array	(0X401400,	0X300);
	update_extra_cmt		(0X402000,	E_PREV + 0,	"; Section 2. (virtual address 00002000)");
	update_extra_cmt		(0X402000,	E_PREV + 1,	"; Virtual size                  : 00001000 (   4096.)");
	update_extra_cmt		(0X402000,	E_PREV + 2,	"; Section size in file          : 00000200 (    512.)");
	update_extra_cmt		(0X402000,	E_PREV + 3,	"; Offset to raw data for section: 00000A00");
	update_extra_cmt		(0X402000,	E_PREV + 4,	"; Flags C0000040: Data Readable Writable");
	update_extra_cmt		(0X402000,	E_PREV + 5,	"; Alignment     : default");
	create_byte	(0X402000);
	make_array	(0X402000,	0X32);
	set_name	(0X402000,	"exec_path");
	create_byte	(0X402032);
	make_array	(0X402032,	0X32);
	set_name	(0X402032,	"attachment_path");
	create_byte	(0X402064);
	make_array	(0X402064,	0X80);
	set_name	(0X402064,	"recipient_name");
	create_dword	(0X4020E4);
	set_name	(0X4020E4,	"connection_state");
	create_dword	(0X4020E8);
	set_name	(0X4020E8,	"mapi_session");
	create_strlit	(0X4020EC,	0X19);
	set_name	(0X4020EC,	"subject");
	create_strlit	(0X402105,	0X4B);
	set_name	(0X402105,	"message_body");
	create_strlit	(0X402150,	0X12);
	set_name	(0X402150,	"attachment_name");
	set_cmt	(0X402162,	"ulReserved",	0);
	create_dword	(0X402162);
	set_name	(0X402162,	"message");
	set_cmt	(0X402166,	"lpszSubject",	0);
	create_dword	(x=0X402166);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40216A,	"lpszNoteText",	0);
	create_dword	(x=0X40216A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40216E,	"lpszMessageType",	0);
	create_dword	(0X40216E);
	set_cmt	(0X402172,	"lpszDataReceived",	0);
	create_dword	(0X402172);
	set_cmt	(0X402176,	"lpszConversationID",	0);
	create_dword	(0X402176);
	set_cmt	(0X40217A,	"flFlags",	0);
	create_dword	(0X40217A);
	set_cmt	(0X40217E,	"lpOriginator",	0);
	create_dword	(x=0X40217E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402182,	"nRecipCount",	0);
	create_dword	(0X402182);
	set_cmt	(0X402186,	"nRecips",	0);
	create_dword	(x=0X402186);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40218A,	"nFileCount",	0);
	create_dword	(0X40218A);
	set_cmt	(0X40218E,	"lpFiles",	0);
	create_dword	(x=0X40218E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402192,	"ulReserved",	0);
	create_dword	(0X402192);
	set_name	(0X402192,	"sender");
	set_cmt	(0X402196,	"ulRecipClass",	0);
	create_dword	(0X402196);
	set_cmt	(0X40219A,	"lpszName",	0);
	create_dword	(0X40219A);
	set_cmt	(0X40219E,	"lpszAddress",	0);
	create_dword	(0X40219E);
	set_cmt	(0X4021A2,	"ulEIDSize",	0);
	create_dword	(0X4021A2);
	set_cmt	(0X4021A6,	"lpEntryID",	0);
	create_dword	(0X4021A6);
	set_cmt	(0X4021AA,	"ulReserved",	0);
	create_dword	(0X4021AA);
	set_name	(0X4021AA,	"recipient");
	set_cmt	(0X4021AE,	"ulRecipClass",	0);
	create_dword	(x=0X4021AE);
	op_enum		(x,	0,	GetEnum("MACRO_MAPI_ORIG"),0);
	set_cmt	(0X4021B2,	"lpszName",	0);
	create_dword	(x=0X4021B2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4021B6,	"lpszAddress",	0);
	create_dword	(x=0X4021B6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4021BA,	"ulEIDSize",	0);
	create_dword	(0X4021BA);
	set_cmt	(0X4021BE,	"lpEntryID",	0);
	create_dword	(0X4021BE);
	set_cmt	(0X4021C2,	"ulReserved",	0);
	create_dword	(0X4021C2);
	set_name	(0X4021C2,	"attachment");
	set_cmt	(0X4021C6,	"flFlags",	0);
	create_dword	(0X4021C6);
	set_cmt	(0X4021CA,	"nPosition",	0);
	create_dword	(0X4021CA);
	set_cmt	(0X4021CE,	"lpszPathName",	0);
	create_dword	(x=0X4021CE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4021D2,	"lpszFileName",	0);
	create_dword	(x=0X4021D2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4021D6,	"lpFileDesc",	0);
	create_dword	(0X4021D6);
	make_array	(0X4021DA,	0X26);
	create_byte	(0X402200);
	make_array	(0X402200,	0XE00);
	update_extra_cmt		(0X403000,	E_PREV + 0,	"; Section 3. (virtual address 00003000)");
	update_extra_cmt		(0X403000,	E_PREV + 1,	"; Virtual size                  : 00001000 (   4096.)");
	update_extra_cmt		(0X403000,	E_PREV + 2,	"; Section size in file          : 00000400 (   1024.)");
	update_extra_cmt		(0X403000,	E_PREV + 3,	"; Offset to raw data for section: 00000C00");
	update_extra_cmt		(0X403000,	E_PREV + 4,	"; Flags C0000040: Data Readable Writable");
	update_extra_cmt		(0X403000,	E_PREV + 5,	"; Alignment     : default");
	create_byte	(0X403001);
	make_array	(0X403001,	0XAB);
	update_extra_cmt		(0X4030AC,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X4030AC,	E_PREV + 1,	"; Imports from KERNEL32.DLL");
	update_extra_cmt		(0X4030AC,	E_PREV + 2,	"; ");
	create_dword	(x=0X4030AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030AC,	"__imp_lstrcat");
	create_dword	(x=0X4030B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030B0,	"__imp_ExitProcess");
	create_dword	(x=0X4030B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030B4,	"__imp_CreateFileA");
	create_dword	(x=0X4030B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030B8,	"__imp_CreateFileMappingA");
	create_dword	(x=0X4030BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030BC,	"__imp_DeleteFileA");
	create_dword	(x=0X4030C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030C0,	"__imp_CloseHandle");
	create_dword	(x=0X4030C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030C4,	"__imp_GetFileSize");
	create_dword	(x=0X4030C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030C8,	"__imp_GetModuleFileNameA");
	create_dword	(x=0X4030CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030CC,	"__imp_GetWindowsDirectoryA");
	create_dword	(x=0X4030D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030D0,	"__imp_MapViewOfFile");
	create_dword	(x=0X4030D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030D4,	"__imp_UnmapViewOfFile");
	create_byte	(0X4030D8);
	make_array	(0X4030D8,	0X4);
	update_extra_cmt		(0X4030DC,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X4030DC,	E_PREV + 1,	"; Imports from SHLWAPI.dll");
	update_extra_cmt		(0X4030DC,	E_PREV + 2,	"; ");
	create_dword	(x=0X4030DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030DC,	"__imp_SHSetValueA");
	create_byte	(0X4030E0);
	make_array	(0X4030E0,	0X4);
	update_extra_cmt		(0X4030E4,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X4030E4,	E_PREV + 1,	"; Imports from WININET.dll");
	update_extra_cmt		(0X4030E4,	E_PREV + 2,	"; ");
	create_dword	(x=0X4030E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030E4,	"__imp_InternetGetConnectedState");
	create_byte	(0X4030E8);
	make_array	(0X4030E8,	0X4);
	update_extra_cmt		(0X4030EC,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X4030EC,	E_PREV + 1,	"; Imports from MAPI32.DLL");
	update_extra_cmt		(0X4030EC,	E_PREV + 2,	"; ");
	create_dword	(x=0X4030EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030EC,	"__imp_MAPISendMail");
	create_byte	(0X4030F0);
	make_array	(0X4030F0,	0XF10);
}

static Functions_0(void) {

	add_func    (0X4011A2,0X4011BB);
	set_func_flags(0X4011A2,0x1001);
	add_func    (0X4011CE,0X4011D3);
	set_func_flags(0X4011CE,0x1001);
	add_func    (0X401201,0X401210);
	set_func_flags(0X401201,0x1001);
	set_frame_size(0X401201, 0, 0, 0);
	add_func    (0X40121C,0X401232);
	set_func_flags(0X40121C,0x1001);
	add_func    (0X40123F,0X40126C);
	set_func_flags(0X40123F,0x1001);
	add_func    (0X40127A,0X40130F);
	set_func_flags(0X40127A,0x1001);
	add_func    (0X40130F,0X401325);
	set_func_flags(0X40130F,0x5000);
	set_frame_size(0X40130F, 0, 0, 0);
	add_func    (0X401325,0X40132B);
	set_func_flags(0X401325,0x50c0);
	set_frame_size(0X401325, 0, 0, 0X8);
	add_func    (0X40132B,0X401331);
	set_func_flags(0X40132B,0x50c1);
	SetType(0X40132B, "void __stdcall __noreturn ExitProcess(UINT uExitCode);");
	set_frame_size(0X40132B, 0, 0, 0X4);
	define_local_var(0X40132B, 0X401331, "[bp+0X4]", "uExitCode");
	add_func    (0X401331,0X401337);
	set_func_flags(0X401331,0x50c0);
	SetType(0X401331, "HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);");
	set_frame_size(0X401331, 0, 0, 0X1C);
	define_local_var(0X401331, 0X401337, "[bp+0X4]", "lpFileName");
	define_local_var(0X401331, 0X401337, "[bp+0X8]", "dwDesiredAccess");
	define_local_var(0X401331, 0X401337, "[bp+0XC]", "dwShareMode");
	define_local_var(0X401331, 0X401337, "[bp+0X10]", "lpSecurityAttributes");
	define_local_var(0X401331, 0X401337, "[bp+0X14]", "dwCreationDisposition");
	define_local_var(0X401331, 0X401337, "[bp+0X18]", "dwFlagsAndAttributes");
	define_local_var(0X401331, 0X401337, "[bp+0X1C]", "hTemplateFile");
	add_func    (0X401337,0X40133D);
	set_func_flags(0X401337,0x50c0);
	SetType(0X401337, "HANDLE __stdcall CreateFileMappingA(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName);");
	set_frame_size(0X401337, 0, 0, 0X18);
	define_local_var(0X401337, 0X40133D, "[bp+0X4]", "hFile");
	define_local_var(0X401337, 0X40133D, "[bp+0X8]", "lpFileMappingAttributes");
	define_local_var(0X401337, 0X40133D, "[bp+0XC]", "flProtect");
	define_local_var(0X401337, 0X40133D, "[bp+0X10]", "dwMaximumSizeHigh");
	define_local_var(0X401337, 0X40133D, "[bp+0X14]", "dwMaximumSizeLow");
	define_local_var(0X401337, 0X40133D, "[bp+0X18]", "lpName");
	add_func    (0X40133D,0X401343);
	set_func_flags(0X40133D,0x50c0);
	SetType(0X40133D, "BOOL __stdcall DeleteFileA(LPCSTR lpFileName);");
	set_frame_size(0X40133D, 0, 0, 0X4);
	define_local_var(0X40133D, 0X401343, "[bp+0X4]", "lpFileName");
	add_func    (0X401343,0X401349);
	set_func_flags(0X401343,0x50c0);
	SetType(0X401343, "BOOL __stdcall CloseHandle(HANDLE hObject);");
	set_frame_size(0X401343, 0, 0, 0X4);
	define_local_var(0X401343, 0X401349, "[bp+0X4]", "hObject");
	add_func    (0X401349,0X40134F);
	set_func_flags(0X401349,0x50c0);
	SetType(0X401349, "DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh);");
	set_frame_size(0X401349, 0, 0, 0X8);
	define_local_var(0X401349, 0X40134F, "[bp+0X4]", "hFile");
	define_local_var(0X401349, 0X40134F, "[bp+0X8]", "lpFileSizeHigh");
	add_func    (0X40134F,0X401355);
	set_func_flags(0X40134F,0x50c0);
	SetType(0X40134F, "DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize);");
	set_frame_size(0X40134F, 0, 0, 0XC);
	define_local_var(0X40134F, 0X401355, "[bp+0X4]", "hModule");
	define_local_var(0X40134F, 0X401355, "[bp+0X8]", "lpFilename");
	define_local_var(0X40134F, 0X401355, "[bp+0XC]", "nSize");
	add_func    (0X401355,0X40135B);
	set_func_flags(0X401355,0x50c0);
	SetType(0X401355, "UINT __stdcall GetWindowsDirectoryA(LPSTR lpBuffer, UINT uSize);");
	set_frame_size(0X401355, 0, 0, 0X8);
	define_local_var(0X401355, 0X40135B, "[bp+0X4]", "lpBuffer");
	define_local_var(0X401355, 0X40135B, "[bp+0X8]", "uSize");
	add_func    (0X40135B,0X401361);
	set_func_flags(0X40135B,0x50c0);
	SetType(0X40135B, "LPVOID __stdcall MapViewOfFile(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap);");
	set_frame_size(0X40135B, 0, 0, 0X14);
	define_local_var(0X40135B, 0X401361, "[bp+0X4]", "hFileMappingObject");
	define_local_var(0X40135B, 0X401361, "[bp+0X8]", "dwDesiredAccess");
	define_local_var(0X40135B, 0X401361, "[bp+0XC]", "dwFileOffsetHigh");
	define_local_var(0X40135B, 0X401361, "[bp+0X10]", "dwFileOffsetLow");
	define_local_var(0X40135B, 0X401361, "[bp+0X14]", "dwNumberOfBytesToMap");
	add_func    (0X401361,0X401367);
	set_func_flags(0X401361,0x50c0);
	SetType(0X401361, "BOOL __stdcall UnmapViewOfFile(LPCVOID lpBaseAddress);");
	set_frame_size(0X401361, 0, 0, 0X4);
	define_local_var(0X401361, 0X401367, "[bp+0X4]", "lpBaseAddress");
	add_func    (0X401367,0X40136D);
	set_func_flags(0X401367,0x50c0);
	SetType(0X401367, "LSTATUS __stdcall SHSetValueA(HKEY hkey, LPCSTR pszSubKey, LPCSTR pszValue, DWORD dwType, LPCVOID pvData, DWORD cbData);");
	set_frame_size(0X401367, 0, 0, 0X18);
	define_local_var(0X401367, 0X40136D, "[bp+0X4]", "hkey");
	define_local_var(0X401367, 0X40136D, "[bp+0X8]", "pszSubKey");
	define_local_var(0X401367, 0X40136D, "[bp+0XC]", "pszValue");
	define_local_var(0X401367, 0X40136D, "[bp+0X10]", "dwType");
	define_local_var(0X401367, 0X40136D, "[bp+0X14]", "pvData");
	define_local_var(0X401367, 0X40136D, "[bp+0X18]", "cbData");
	add_func    (0X40136D,0X401373);
	set_func_flags(0X40136D,0x50c0);
	SetType(0X40136D, "BOOL __stdcall InternetGetConnectedState(LPDWORD lpdwFlags, DWORD dwReserved);");
	set_frame_size(0X40136D, 0, 0, 0X8);
	define_local_var(0X40136D, 0X401373, "[bp+0X4]", "lpdwFlags");
	define_local_var(0X40136D, 0X401373, "[bp+0X8]", "dwReserved");
	add_func    (0X401373,0X401379);
	set_func_flags(0X401373,0x50c0);
	SetType(0X401373, "MAPISENDMAIL MAPISendMail;");
	set_frame_size(0X401373, 0, 0, 0X14);
	define_local_var(0X401373, 0X401379, "[bp+0X4]", "lhSession");
	define_local_var(0X401373, 0X401379, "[bp+0X8]", "ulUIParam");
	define_local_var(0X401373, 0X401379, "[bp+0XC]", "lpMessage");
	define_local_var(0X401373, 0X401379, "[bp+0X10]", "flFlags");
	define_local_var(0X401373, 0X401379, "[bp+0X14]", "ulReserved");
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0X401000,"es",0,3);
	split_sreg_range(0X402000,"es",0,3);
	split_sreg_range(0X403000,"es",0,3);
	split_sreg_range(0X401000,"ss",0,3);
	split_sreg_range(0X402000,"ss",0,3);
	split_sreg_range(0X403000,"ss",0,3);
	split_sreg_range(0X401000,"ds",0X1,3);
	split_sreg_range(0X4011A2,"ds",0X1,3);
	split_sreg_range(0X402000,"ds",0X1,3);
	split_sreg_range(0X403000,"ds",0X1,3);
	split_sreg_range(0X401000,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X402000,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X403000,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X401000,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X402000,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X403000,"gs",0XFFFFFFFF,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
        end_type_updating(UTP_STRUCT);
}

// End of file.
